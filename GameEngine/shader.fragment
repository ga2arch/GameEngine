#version 330 core

uniform sampler2DShadow shadow_map;

uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_specular_power;

layout (location = 0) out vec4 color;
in VS_FS_INTERFACE
{
    vec4 shadow_coord;
    vec3 world_coord;
    vec3 eye_coord;
    vec3 normal;
} fragment;

void main(void)
{
    vec3 light_position = vec3(-2.0, 2.0, -2);
    vec3 material_ambient = vec3(.1,.1,.1);
    vec3 material_diffuse = vec3(1,1,1);
    vec3 material_specular = vec3(1,1,1);
    float material_specular_power = 8;

    vec3 N = fragment.normal;
    vec3 L = normalize(light_position - fragment.world_coord);
    vec3 R = reflect(-L, N);
    vec3 E = normalize(fragment.eye_coord);
    float NdotL = dot(N, L);
    float EdotR = dot(-E, R);
    float diffuse = max(NdotL, 0.0);
    float specular = max(pow(EdotR, material_specular_power),0.0);
    float f = textureProj(shadow_map, fragment.shadow_coord);
    
    color = vec4(material_ambient +
                 f * (material_diffuse * diffuse +material_specular * specular), 1.0);
}
                      