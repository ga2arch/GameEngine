#version 330

in VS_FS_INTERFACE {
    
    vec3 world_coord;
    vec3 eye_coord;
    vec3 normal;
    vec4 shadow_coord;
    
} fragment;

struct LightProperty {
    bool is_enabled;
    bool is_local;
    bool is_spot;
    
    vec3 pos;
    vec3 eye_pos;
    vec3 dir;
    vec3 ambient;
    vec3 color;
    vec3 half_vector;
    
    vec3 irradiance;
    float spot_umbra;
    float spot_penumbra;
    float spot_exp;
    float constant_attenuation;
    float linear_attenuation;
    float quadratic_attenuation;
};

struct MaterialProperty {
    vec3 emission;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
    
    vec3 kd;
    float ks;
};

uniform LightProperty lights[1];
uniform MaterialProperty material;

uniform ivec2 tiles[500];
uniform vec3 camera;

uniform isamplerBuffer tex_tile_lights;
uniform sampler2DShadow shadow_map;

out vec4 fragColor;

const mat4 bias = mat4(0.5, 0.0, 0.0, 0.0,
                       0.0, 0.5, 0.0, 0.0,
                       0.0, 0.0, 0.5, 0.0,
                       0.5, 0.5, 0.5, 1.0);

vec3 fresnel(vec3 ior, vec3 color, vec3 v1, vec3 v2) {
    // http://seblagarde.wordpress.com/2012/06/03/spherical-gaussien-approximation-for-blinn-phong-phong-and-fresnel/
    // pow(..) = exp2(-8.35 * dot(v1, v2))
    vec3 F0 = abs ((1.0 - ior) / (1.0 + ior));
    F0 = F0 * F0;
    F0 = mix(F0, color, .5);
    return F0 + (1 - F0) * pow((1 - dot(v1, v2)), 5);
}

void main() {
    ivec2 st = ivec2(gl_FragCoord.xy) / ivec2(32, 32);
    int tile_index = st.x + st.y * 800/32;
    
    if (tiles[tile_index].x == 0)
        discard;
    
    int l_num = tiles[tile_index].x;
    int l_offset = tiles[tile_index].y;
    
    vec3 Lo = vec3(0);
    
    for (int i=0; i < l_num; i++) {
        int light_index = l_offset+i;
        int light_id = texelFetch(tex_tile_lights, light_index).x;
        LightProperty light = lights[light_id];
        
        if (light.is_local) {
            vec3 pos = light.eye_pos;
            
            vec3 L = normalize(pos - fragment.eye_coord);
            vec3 V = normalize(camera - fragment.eye_coord);
            vec3 H = normalize(L + V);
            
            float cosH = clamp(dot(H, fragment.normal), 0, 1);
            float cosI = clamp(dot(fragment.normal, L), 0, 1);
            
            float r = length(pos - fragment.eye_coord);
            float attenuation = 1.0 / (light.constant_attenuation
                                       + light.linear_attenuation * r
                                       + light.quadratic_attenuation * r * r);
            
            vec3 irr = light.irradiance * attenuation;
            
//            if (lights[0].is_spot) {
//                float cosS = dot(normalize(light.dir), L);
//                float cosU = lights[0].spot_umbra;
//                float cosP = lights[0].spot_penumbra;
//                
//                if (cosU < cosS && cosS < cosP)
//                    irr = irr * pow ((cosS - cosU) / (cosP - cosU), lights[0].spot_exp);
//                
//                if (cosS <= cosU)
//                    irr = vec3(0.0);
//            }
            //
            //        float shadow = 0.0;
            //        shadow += textureProjOffset(shadow_map, fragment.shadow_coord, ivec2(-1,  1));
            //        shadow += textureProjOffset(shadow_map, fragment.shadow_coord, ivec2( 1,  1));
            //        shadow += textureProjOffset(shadow_map, fragment.shadow_coord, ivec2(-1, -1));
            //        shadow += textureProjOffset(shadow_map, fragment.shadow_coord, ivec2( 1, -1));
            //        float f = shadow / 4.0;
            
            Lo += light.ambient * material.ambient * attenuation;
            Lo +=  (light.color * material.kd
                    + material.ks * pow(cosH, material.shininess) * fresnel(vec3(.47), material.specular, L, H))
                    * irr * cosI;
            
        }
    }

    fragColor = vec4(vec3(Lo), 1.0);
}